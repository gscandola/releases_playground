version: 2.1

# --------------- Parameters (from Github Actions) ---------------
parameters:
    GHA_Actor:
        type: string
        default: ''
    GHA_Action:
        type: string
        default: ''
    GHA_Event:
        type: string
        default: ''
    GHA_Meta:
        type: string
        default: ''

# --------------- Alias ---------------
default_docker: &default_docker
    - image: cimg/node:lts

tagged: &tagged
    filters:
        tags:
            only: /v.*/

# --------------- Commands ---------------
commands:
    install_pnpm:
        description: 'Setup pnpm based on engine'
        steps:
            - run:
                name: Setup pnpm
                command: |
                    # Circle CI run these command from root directory of the project
                    # Use node to extract packageManager indicated in package.json
                    PKG_MANAGER="$(node -p "require('./package.json').packageManager")"

                    # Globally install the right package manager version
                    npm install -g "$PKG_MANAGER"

    install_dependencies:
        description: 'Dependencies installation'
        steps:
            - run:
                name: 'Installing dependencies'
                command: pnpm install

    setup:
        description: 'Setup project'
        steps:
            - checkout
            - install_pnpm
            - install_dependencies

    build:
        description: 'Build the appplication'
        parameters:
            target_env:
                type: string
        steps:
            - setup
            - run:
                  name: Build
                  command: |
                      echo "Built << parameters.target_env >> !"
    deploy:
        parameters:
            target_env:
                type: string
        steps:
            - run:
                  name: Deploy
                  command: |
                      echo "Deployed << parameters.target_env >> !"

# --------------- Jobs ---------------
jobs:
    test:
        docker: *default_docker
        resource_class: small
        steps:
            - run:
                  name: Run tests
                  command: echo "Tests succeed"
    build-preview:
        docker: *default_docker
        resource_class: small
        steps:
            - build:
                target_env: 'preview'

    deploy-preview:
        docker: *default_docker
        resource_class: small
        steps:
            - deploy:
                target_env: 'preview'

    build-live:
        docker: *default_docker
        resource_class: small
        steps:
            - build:
                target_env: 'live'

    deploy-live:
        docker: *default_docker
        resource_class: small
        steps:
            - deploy:
                target_env: 'live'

    trigger-final-release:
        docker: *default_docker
        resource_class: small
        steps:
            - run:
                  name: Trigger final release creation
                  command: |
                    node ./.circleci/scripts/createFinalRelease.mjs

# --------------- Jobs ---------------
workflows:
    pr_ci:
        when:
            equal: ['pull_request', << pipeline.parameters.GHA_Event >>]
        jobs:
            - test
    build_deploy_preview:
        when:
            and:
                - equal: ['release', << pipeline.parameters.GHA_Action >>]
                - equal: ['pre-release', << pipeline.parameters.GHA_Meta >>]
        jobs:
            - build-preview:
                  <<: *tagged
            - deploy-preview:
                  <<: *tagged
                  requires:
                      - build-preview
            - request-qa-approval:
                  type: approval
                  <<: *tagged
                  requires:
                      - deploy-preview
            - trigger-final-release:
                  <<: *tagged
                  requires:
                      - request-qa-approval
    build_deploy_live:
        when:
            and:
                - equal: ['release', << pipeline.parameters.GHA_Action >>]
                - equal: ['final-release', << pipeline.parameters.GHA_Meta >>]
        jobs:
            - build-live:
                  <<: *tagged
            - deploy-live:
                  <<: *tagged
                  requires:
                      - build-live

